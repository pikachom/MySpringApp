{"ast":null,"code":"import axios from \"axios\";\nimport { observable, runInAction, toJS } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\nlet authMethods = observable({\n  login: loginData => {\n    console.log(loginData);\n    axios.post(\"http://localhost:8080/api/authenticate\", {\n      withCredentials: true,\n      origin: \"http://localhost:8080\",\n      username: loginData.username,\n      password: loginData.password\n    }).then(function (response) {\n      console.log(\"로그인 성공\");\n      console.log(response);\n      authMethods.setDefaultAxiosRequestHeader(response);\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n      console.log(error);\n    });\n  },\n  setDefaultAxiosRequestHeader: response => {\n    const {\n      accessToken\n    } = response.data;\n    console.log(response.data); // accessToken 설정\n\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${accessToken}`;\n  },\n  setUserInfo: response => {\n    const {\n      accessToken\n    } = response.data;\n    userInfo = jwt_decode(`Bearer ${accessToken}`, {\n      header: true\n    });\n    console.log(userInfo);\n  },\n  hello: loginData => {\n    axios.get(\"http://localhost:8080/api/hello\", {\n      withCredentials: true,\n      origin: \"http://localhost:8080\"\n    }).then(function (response) {\n      console.log(\"로그인 성공\");\n      console.log(response);\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n      console.log(error);\n    });\n  }\n});\nlet userInfo = observable({\n  username: null,\n  nickname: null\n});\nexport default authMethods;\nexport { userInfo };","map":{"version":3,"sources":["/home/ubuntu/바탕화면/dev/source/react/my-app/src/Auth/AuthStore.js"],"names":["axios","observable","runInAction","toJS","jwt_decode","authMethods","login","loginData","console","log","post","withCredentials","origin","username","password","then","response","setDefaultAxiosRequestHeader","catch","error","accessToken","data","defaults","headers","common","setUserInfo","userInfo","header","hello","get","nickname"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,IAAlC,QAA8C,MAA9C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAIC,WAAW,GAAGJ,UAAU,CAAC;AAC3BK,EAAAA,KAAK,EAAGC,SAAD,IAAe;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAP,IAAAA,KAAK,CACFU,IADH,CACQ,wCADR,EACkD;AAC9CC,MAAAA,eAAe,EAAE,IAD6B;AAE9CC,MAAAA,MAAM,EAAE,uBAFsC;AAG9CC,MAAAA,QAAQ,EAAEN,SAAS,CAACM,QAH0B;AAI9CC,MAAAA,QAAQ,EAAEP,SAAS,CAACO;AAJ0B,KADlD,EAOGC,IAPH,CAOQ,UAAUC,QAAV,EAAoB;AACxBR,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACAX,MAAAA,WAAW,CAACY,4BAAZ,CAAyCD,QAAzC;AACD,KAXH,EAYGE,KAZH,CAYS,UAAUC,KAAV,EAAiB;AACtBX,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD,KAfH;AAgBD,GAnB0B;AAoB3BF,EAAAA,4BAA4B,EAAGD,QAAD,IAAc;AAC1C,UAAM;AAAEI,MAAAA;AAAF,QAAkBJ,QAAQ,CAACK,IAAjC;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYO,QAAQ,CAACK,IAArB,EAF0C,CAG1C;;AACArB,IAAAA,KAAK,CAACsB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASJ,WAAY,EAAvE;AACD,GAzB0B;AA0B3BK,EAAAA,WAAW,EAAGT,QAAD,IAAc;AACzB,UAAM;AAAEI,MAAAA;AAAF,QAAkBJ,QAAQ,CAACK,IAAjC;AACAK,IAAAA,QAAQ,GAAGtB,UAAU,CAAE,UAASgB,WAAY,EAAvB,EAA0B;AAAEO,MAAAA,MAAM,EAAE;AAAV,KAA1B,CAArB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ;AACD,GA9B0B;AA+B3BE,EAAAA,KAAK,EAAGrB,SAAD,IAAe;AACpBP,IAAAA,KAAK,CACF6B,GADH,CACO,iCADP,EAC0C;AACtClB,MAAAA,eAAe,EAAE,IADqB;AAEtCC,MAAAA,MAAM,EAAE;AAF8B,KAD1C,EAKGG,IALH,CAKQ,UAAUC,QAAV,EAAoB;AACxBR,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACD,KARH,EASGE,KATH,CASS,UAAUC,KAAV,EAAiB;AACtBX,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD,KAZH;AAaD;AA7C0B,CAAD,CAA5B;AA+CA,IAAIO,QAAQ,GAAGzB,UAAU,CAAC;AACxBY,EAAAA,QAAQ,EAAE,IADc;AAExBiB,EAAAA,QAAQ,EAAE;AAFc,CAAD,CAAzB;AAKA,eAAezB,WAAf;AACA,SAASqB,QAAT","sourcesContent":["import axios from \"axios\";\nimport { observable, runInAction, toJS } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\n\nlet authMethods = observable({\n  login: (loginData) => {\n    console.log(loginData);\n    axios\n      .post(\"http://localhost:8080/api/authenticate\", {\n        withCredentials: true,\n        origin: \"http://localhost:8080\",\n        username: loginData.username,\n        password: loginData.password,\n      })\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n        console.log(response);\n        authMethods.setDefaultAxiosRequestHeader(response);\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n        console.log(error);\n      });\n  },\n  setDefaultAxiosRequestHeader: (response) => {\n    const { accessToken } = response.data;\n    console.log(response.data);\n    // accessToken 설정\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${accessToken}`;\n  },\n  setUserInfo: (response) => {\n    const { accessToken } = response.data;\n    userInfo = jwt_decode(`Bearer ${accessToken}`, { header: true });\n    console.log(userInfo);\n  },\n  hello: (loginData) => {\n    axios\n      .get(\"http://localhost:8080/api/hello\", {\n        withCredentials: true,\n        origin: \"http://localhost:8080\",\n      })\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n        console.log(error);\n      });\n  },\n});\nlet userInfo = observable({\n  username: null,\n  nickname: null,\n});\n\nexport default authMethods;\nexport { userInfo };\n"]},"metadata":{},"sourceType":"module"}