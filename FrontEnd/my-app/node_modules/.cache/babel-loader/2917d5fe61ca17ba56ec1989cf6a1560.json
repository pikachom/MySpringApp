{"ast":null,"code":"import axios from \"axios\";\nimport { observable, runInAction, toJS, reaction } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\nlet authMethods = observable({\n  login: (loginData, history) => {\n    axios.post(\"http://localhost:8080/api/signin\", {\n      withCredentials: true,\n      username: loginData.username,\n      password: loginData.password\n    }).then(function (response) {\n      console.log(\"로그인 성공\");\n      authMethods.setDefaultAxiosRequestHeader(response.data.token);\n      authMethods.setUserInfo(response.data.token);\n      runInAction(() => {\n        authorizationInfo.isAuthorized = true;\n      });\n      history.replace(\"/\");\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n    });\n  },\n  logout: () => {\n    axios.defaults.headers.common[\"Authorization\"] = null;\n    runInAction(() => {\n      authMethods.setAuthorizationInfo(false);\n    });\n  },\n  setDefaultAxiosRequestHeader: token => {\n    // accessToken 설정\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  },\n  setUserInfo: token => {\n    userInfo = jwt_decode(token);\n  },\n  hello: loginData => {\n    axios.get(\"http://localhost:8080/api/hello\", {\n      withCredentials: true,\n      origin: \"http://localhost:8080\"\n    }).then(function (response) {\n      console.log(\"로그인 성공\");\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n    });\n  },\n\n  setAuthorizationInfo(isAuthorized) {\n    runInAction(() => {\n      authorizationInfo.isAuthorized = isAuthorized;\n    });\n  },\n\n  getIsAuthorized() {\n    return authorizationInfo.isAuthorized;\n  },\n\n  getUserInfo() {\n    return userInfo;\n  }\n\n});\nlet userInfo = observable({\n  sub: null,\n  role: null\n});\nlet authorizationInfo = observable({\n  isAuthorized: false\n});\nexport default authMethods;\nexport { userInfo, authorizationInfo };","map":{"version":3,"sources":["/home/ubuntu/바탕화면/dev/source/react/my-app/src/Auth/AuthStore.js"],"names":["axios","observable","runInAction","toJS","reaction","jwt_decode","authMethods","login","loginData","history","post","withCredentials","username","password","then","response","console","log","setDefaultAxiosRequestHeader","data","token","setUserInfo","authorizationInfo","isAuthorized","replace","catch","error","logout","defaults","headers","common","setAuthorizationInfo","userInfo","hello","get","origin","getIsAuthorized","getUserInfo","sub","role"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { observable, runInAction, toJS, reaction } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\n\nlet authMethods = observable({\n  login: (loginData, history) => {\n    axios\n      .post(\"http://localhost:8080/api/signin\", {\n        withCredentials: true,\n        username: loginData.username,\n        password: loginData.password,\n      })\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n        authMethods.setDefaultAxiosRequestHeader(response.data.token);\n        authMethods.setUserInfo(response.data.token);\n        runInAction(() => {\n          authorizationInfo.isAuthorized = true;\n        });\n        history.replace(\"/\");\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n      });\n  },\n  logout: () => {\n    axios.defaults.headers.common[\"Authorization\"] = null;\n    runInAction(() => {\n      authMethods.setAuthorizationInfo(false);\n    });\n  },\n  setDefaultAxiosRequestHeader: (token) => {\n    // accessToken 설정\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  },\n  setUserInfo: (token) => {\n    userInfo = jwt_decode(token);\n  },\n  hello: (loginData) => {\n    axios\n      .get(\"http://localhost:8080/api/hello\", {\n        withCredentials: true,\n        origin: \"http://localhost:8080\",\n      })\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n      });\n  },\n  setAuthorizationInfo(isAuthorized) {\n    runInAction(() => {\n      authorizationInfo.isAuthorized = isAuthorized;\n    });\n  },\n  getIsAuthorized() {\n    return authorizationInfo.isAuthorized;\n  },\n  getUserInfo() {\n    return userInfo;\n  },\n});\nlet userInfo = observable({\n  sub: null,\n  role: null,\n});\nlet authorizationInfo = observable({\n  isAuthorized: false,\n});\n\nexport default authMethods;\nexport { userInfo, authorizationInfo };\n"]},"metadata":{},"sourceType":"module"}