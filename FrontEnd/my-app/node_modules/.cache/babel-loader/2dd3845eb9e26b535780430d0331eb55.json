{"ast":null,"code":"import axios from \"axios\";\nimport { observable, runInAction, toJS, reaction } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\nlet authMethods = observable({\n  login: (loginData, history) => {\n    console.log(loginData);\n    axios.post(\"http://localhost:8080/api/signin\", {\n      withCredentials: true,\n      username: loginData.username,\n      password: loginData.password\n    }).then(function (response) {\n      console.log(\"로그인 성공\");\n      console.log(response);\n      authMethods.setDefaultAxiosRequestHeader(response.data.token);\n      authMethods.setUserInfo(response.data.token);\n      runInAction(() => {\n        authorizationInfo.isAuthorized = true;\n      });\n      console.log(authorizationInfo.isAuthorized);\n      history.replace(\"/\");\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n      console.log(error);\n    });\n  },\n  logout: () => {\n    console.log(\"asdf\");\n    axios.defaults.headers.common[\"Authorization\"] = null;\n    runInAction(() => {\n      authorizationInfo.isAuthorized = false;\n    });\n  },\n  setDefaultAxiosRequestHeader: token => {\n    // console.log(response.data);\n    // accessToken 설정\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  },\n  setUserInfo: token => {\n    console.log(token);\n    userInfo = jwt_decode(token);\n    console.log(userInfo);\n  },\n  hello: loginData => {\n    axios.get(\"http://localhost:8080/api/hello\", {\n      withCredentials: true,\n      origin: \"http://localhost:8080\"\n    }).then(function (response) {\n      console.log(\"로그인 성공\");\n      console.log(response);\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n      console.log(error);\n    });\n  },\n\n  setAuthorizationInfo(isAuthorized) {\n    runInAction(() => {\n      authorizationInfo = {\n        isAuthorized: isAuthorized\n      };\n    });\n    console.log(\"asdf\");\n    console.log(authorizationInfo);\n  },\n\n  getIsAuthorized() {\n    return authorizationInfo.isAuthorized;\n  },\n\n  getUserInfo() {\n    return userInfo;\n  }\n\n});\nlet userInfo = observable({\n  sub: null,\n  role: null\n});\nlet authorizationInfo = observable({\n  isAuthorized: false\n});\nlet test = observable({\n  testt: \"asdf\"\n});\nexport default authMethods;\nexport { userInfo, authorizationInfo, test };","map":{"version":3,"sources":["/home/ubuntu/바탕화면/dev/source/react/my-app/src/Auth/AuthStore.js"],"names":["axios","observable","runInAction","toJS","reaction","jwt_decode","authMethods","login","loginData","history","console","log","post","withCredentials","username","password","then","response","setDefaultAxiosRequestHeader","data","token","setUserInfo","authorizationInfo","isAuthorized","replace","catch","error","logout","defaults","headers","common","userInfo","hello","get","origin","setAuthorizationInfo","getIsAuthorized","getUserInfo","sub","role","test","testt"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { observable, runInAction, toJS, reaction } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\n\nlet authMethods = observable({\n  login: (loginData, history) => {\n    console.log(loginData);\n    axios\n      .post(\"http://localhost:8080/api/signin\", {\n        withCredentials: true,\n        username: loginData.username,\n        password: loginData.password,\n      })\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n        console.log(response);\n        authMethods.setDefaultAxiosRequestHeader(response.data.token);\n        authMethods.setUserInfo(response.data.token);\n        runInAction(() => {\n          authorizationInfo.isAuthorized = true;\n        });\n        console.log(authorizationInfo.isAuthorized);\n        history.replace(\"/\");\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n        console.log(error);\n      });\n  },\n  logout: () => {\n    console.log(\"asdf\");\n    axios.defaults.headers.common[\"Authorization\"] = null;\n    runInAction(() => {\n      authorizationInfo.isAuthorized = false;\n    });\n  },\n  setDefaultAxiosRequestHeader: (token) => {\n    // console.log(response.data);\n    // accessToken 설정\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  },\n  setUserInfo: (token) => {\n    console.log(token);\n    userInfo = jwt_decode(token);\n    console.log(userInfo);\n  },\n  hello: (loginData) => {\n    axios\n      .get(\"http://localhost:8080/api/hello\", {\n        withCredentials: true,\n        origin: \"http://localhost:8080\",\n      })\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n        console.log(error);\n      });\n  },\n  setAuthorizationInfo(isAuthorized) {\n    runInAction(() => {\n      authorizationInfo = { isAuthorized: isAuthorized };\n    });\n    console.log(\"asdf\");\n    console.log(authorizationInfo);\n  },\n  getIsAuthorized() {\n    return authorizationInfo.isAuthorized;\n  },\n  getUserInfo() {\n    return userInfo;\n  },\n});\nlet userInfo = observable({\n  sub: null,\n  role: null,\n});\nlet authorizationInfo = observable({\n  isAuthorized: false,\n});\nlet test = observable({\n  testt: \"asdf\",\n});\n\nexport default authMethods;\nexport { userInfo, authorizationInfo, test };\n"]},"metadata":{},"sourceType":"module"}