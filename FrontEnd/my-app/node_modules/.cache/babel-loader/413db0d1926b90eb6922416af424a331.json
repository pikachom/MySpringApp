{"ast":null,"code":"import axios from \"axios\";\nimport { observable, runInAction, toJS } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\nlet authMethods = observable({\n  login: (loginData, history) => {\n    console.log(loginData);\n    let form = new FormData();\n    form.append(\"username\", loginData.username);\n    form.append(\"wpassword\", loginData.password);\n    axios.post(\"http://localhost:8080/signin\", form).then(function (response) {\n      console.log(\"로그인 성공\");\n      console.log(response);\n      authMethods.setDefaultAxiosRequestHeader(response.data.token);\n      authMethods.setUserInfo(response.data.token);\n      runInAction(() => {\n        authorizationInfo.isAuthorized = true;\n      });\n      console.log(authorizationInfo.isAuthorized);\n      history.replace(\"/\");\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n      console.log(error);\n    });\n  },\n  logout: () => {\n    axios.defaults.headers.common[\"Authorization\"] = null;\n    runInAction(() => {\n      authorizationInfo.isAuthorized = false;\n    });\n  },\n  setDefaultAxiosRequestHeader: token => {\n    // console.log(response.data);\n    // accessToken 설정\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  },\n  setUserInfo: token => {\n    userInfo = jwt_decode(token);\n    console.log(userInfo);\n  },\n  hello: loginData => {\n    axios.get(\"http://localhost:8080/api/hello\", {\n      withCredentials: true,\n      origin: \"http://localhost:8080\"\n    }).then(function (response) {\n      console.log(\"로그인 성공\");\n      console.log(response);\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n      console.log(error);\n    });\n  }\n});\nlet userInfo = observable({\n  sub: null,\n  role: null\n});\nlet authorizationInfo = observable({\n  isAuthorized: false\n});\nexport default authMethods;\nexport { userInfo, authorizationInfo };","map":{"version":3,"sources":["/home/ubuntu/바탕화면/dev/source/react/my-app/src/Auth/AuthStore.js"],"names":["axios","observable","runInAction","toJS","jwt_decode","authMethods","login","loginData","history","console","log","form","FormData","append","username","password","post","then","response","setDefaultAxiosRequestHeader","data","token","setUserInfo","authorizationInfo","isAuthorized","replace","catch","error","logout","defaults","headers","common","userInfo","hello","get","withCredentials","origin","sub","role"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { observable, runInAction, toJS } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\n\nlet authMethods = observable({\n  login: (loginData, history) => {\n    console.log(loginData);\n    let form = new FormData();\n    form.append(\"username\", loginData.username);\n    form.append(\"wpassword\", loginData.password);\n    axios\n      .post(\"http://localhost:8080/signin\", form)\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n        console.log(response);\n        authMethods.setDefaultAxiosRequestHeader(response.data.token);\n        authMethods.setUserInfo(response.data.token);\n        runInAction(() => {\n          authorizationInfo.isAuthorized = true;\n        });\n        console.log(authorizationInfo.isAuthorized);\n        history.replace(\"/\");\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n        console.log(error);\n      });\n  },\n  logout: () => {\n    axios.defaults.headers.common[\"Authorization\"] = null;\n    runInAction(() => {\n      authorizationInfo.isAuthorized = false;\n    });\n  },\n  setDefaultAxiosRequestHeader: (token) => {\n    // console.log(response.data);\n    // accessToken 설정\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  },\n  setUserInfo: (token) => {\n    userInfo = jwt_decode(token);\n    console.log(userInfo);\n  },\n  hello: (loginData) => {\n    axios\n      .get(\"http://localhost:8080/api/hello\", {\n        withCredentials: true,\n        origin: \"http://localhost:8080\",\n      })\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n        console.log(error);\n      });\n  },\n});\nlet userInfo = observable({\n  sub: null,\n  role: null,\n});\nlet authorizationInfo = observable({\n  isAuthorized: false,\n});\n\nexport default authMethods;\nexport { userInfo, authorizationInfo };\n"]},"metadata":{},"sourceType":"module"}