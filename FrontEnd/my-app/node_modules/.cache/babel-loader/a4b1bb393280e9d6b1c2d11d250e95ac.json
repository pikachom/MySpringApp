{"ast":null,"code":"import axios from \"axios\";\nimport { observable, runInAction, toJS } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\nlet authMethods = observable({\n  login: loginData => {\n    console.log(loginData);\n    axios.post(\"http://localhost:8080/api/authenticate\", {\n      withCredentials: true,\n      username: loginData.username,\n      password: loginData.password\n    }).then(function (response) {\n      console.log(\"로그인 성공\");\n      console.log(response);\n      authMethods.setDefaultAxiosRequestHeader(response);\n      authMethods.setUserInfo(response);\n      authorizationInfo.isAuthorized = true;\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n      console.log(error);\n    });\n  },\n  setDefaultAxiosRequestHeader: response => {\n    const {\n      token\n    } = response.data; // console.log(response.data);\n    // accessToken 설정\n\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  },\n  setUserInfo: response => {\n    const {\n      token\n    } = response.data;\n    userInfo = jwt_decode(token);\n    console.log(userInfo);\n  },\n  hello: loginData => {\n    axios.get(\"http://localhost:8080/api/hello\", {\n      withCredentials: true,\n      origin: \"http://localhost:8080\"\n    }).then(function (response) {\n      console.log(\"로그인 성공\");\n      console.log(response);\n    }).catch(function (error) {\n      console.log(\"로그인 실패\");\n      console.log(error);\n    });\n  }\n});\nlet userInfo = observable({\n  sub: null,\n  role: null\n});\nlet authorizationInfo = observable({\n  isAuthorized: false\n});\nexport default authMethods;\nexport { userInfo, authorizationInfo };","map":{"version":3,"sources":["/home/ubuntu/바탕화면/dev/source/react/my-app/src/Auth/AuthStore.js"],"names":["axios","observable","runInAction","toJS","jwt_decode","authMethods","login","loginData","console","log","post","withCredentials","username","password","then","response","setDefaultAxiosRequestHeader","setUserInfo","authorizationInfo","isAuthorized","catch","error","token","data","defaults","headers","common","userInfo","hello","get","origin","sub","role"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,IAAlC,QAA8C,MAA9C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAIC,WAAW,GAAGJ,UAAU,CAAC;AAC3BK,EAAAA,KAAK,EAAGC,SAAD,IAAe;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAP,IAAAA,KAAK,CACFU,IADH,CACQ,wCADR,EACkD;AAC9CC,MAAAA,eAAe,EAAE,IAD6B;AAE9CC,MAAAA,QAAQ,EAAEL,SAAS,CAACK,QAF0B;AAG9CC,MAAAA,QAAQ,EAAEN,SAAS,CAACM;AAH0B,KADlD,EAMGC,IANH,CAMQ,UAAUC,QAAV,EAAoB;AACxBP,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;AACAV,MAAAA,WAAW,CAACW,4BAAZ,CAAyCD,QAAzC;AACAV,MAAAA,WAAW,CAACY,WAAZ,CAAwBF,QAAxB;AACAG,MAAAA,iBAAiB,CAACC,YAAlB,GAAiC,IAAjC;AACD,KAZH,EAaGC,KAbH,CAaS,UAAUC,KAAV,EAAiB;AACtBb,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACD,KAhBH;AAiBD,GApB0B;AAqB3BL,EAAAA,4BAA4B,EAAGD,QAAD,IAAc;AAC1C,UAAM;AAAEO,MAAAA;AAAF,QAAYP,QAAQ,CAACQ,IAA3B,CAD0C,CAE1C;AACA;;AACAvB,IAAAA,KAAK,CAACwB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASJ,KAAM,EAAjE;AACD,GA1B0B;AA2B3BL,EAAAA,WAAW,EAAGF,QAAD,IAAc;AACzB,UAAM;AAAEO,MAAAA;AAAF,QAAYP,QAAQ,CAACQ,IAA3B;AACAI,IAAAA,QAAQ,GAAGvB,UAAU,CAACkB,KAAD,CAArB;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAYkB,QAAZ;AACD,GA/B0B;AAgC3BC,EAAAA,KAAK,EAAGrB,SAAD,IAAe;AACpBP,IAAAA,KAAK,CACF6B,GADH,CACO,iCADP,EAC0C;AACtClB,MAAAA,eAAe,EAAE,IADqB;AAEtCmB,MAAAA,MAAM,EAAE;AAF8B,KAD1C,EAKGhB,IALH,CAKQ,UAAUC,QAAV,EAAoB;AACxBP,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;AACD,KARH,EASGK,KATH,CASS,UAAUC,KAAV,EAAiB;AACtBb,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACD,KAZH;AAaD;AA9C0B,CAAD,CAA5B;AAgDA,IAAIM,QAAQ,GAAG1B,UAAU,CAAC;AACxB8B,EAAAA,GAAG,EAAE,IADmB;AAExBC,EAAAA,IAAI,EAAE;AAFkB,CAAD,CAAzB;AAIA,IAAId,iBAAiB,GAAGjB,UAAU,CAAC;AACjCkB,EAAAA,YAAY,EAAE;AADmB,CAAD,CAAlC;AAIA,eAAed,WAAf;AACA,SAASsB,QAAT,EAAmBT,iBAAnB","sourcesContent":["import axios from \"axios\";\nimport { observable, runInAction, toJS } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\n\nlet authMethods = observable({\n  login: (loginData) => {\n    console.log(loginData);\n    axios\n      .post(\"http://localhost:8080/api/authenticate\", {\n        withCredentials: true,\n        username: loginData.username,\n        password: loginData.password,\n      })\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n        console.log(response);\n        authMethods.setDefaultAxiosRequestHeader(response);\n        authMethods.setUserInfo(response);\n        authorizationInfo.isAuthorized = true;\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n        console.log(error);\n      });\n  },\n  setDefaultAxiosRequestHeader: (response) => {\n    const { token } = response.data;\n    // console.log(response.data);\n    // accessToken 설정\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  },\n  setUserInfo: (response) => {\n    const { token } = response.data;\n    userInfo = jwt_decode(token);\n    console.log(userInfo);\n  },\n  hello: (loginData) => {\n    axios\n      .get(\"http://localhost:8080/api/hello\", {\n        withCredentials: true,\n        origin: \"http://localhost:8080\",\n      })\n      .then(function (response) {\n        console.log(\"로그인 성공\");\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(\"로그인 실패\");\n        console.log(error);\n      });\n  },\n});\nlet userInfo = observable({\n  sub: null,\n  role: null,\n});\nlet authorizationInfo = observable({\n  isAuthorized: false,\n});\n\nexport default authMethods;\nexport { userInfo, authorizationInfo };\n"]},"metadata":{},"sourceType":"module"}